q()
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
install.package("KernSmooth")
install.packages("KernSmooth")
KernSmooth
library(KernSmooth)
x=[1,2,3]
x<-[1,2,3]
x<-(1,2,3)
x<-c(1,2,3)
x
matrix = c(x,x)
matrix
exp(sin(pi/16))/(1-exp(sin(pi/16)))
f <- sin(pi/16)
f
g = exp(f)
h = g/(1-g)
h
x=rnorm
x
x=rnorm()
x=rnorm(1)
x=rnorm(30)
x
y=x[>0]
test = (x>0)\
test = (x>0)
y=x[test]
y
z=max(0,x)
z
z=x-x
z
z = z+x[test]
z=x
for i in z{if z[i]<0{z[i]=0}}
for (i in z){if (z[i]<0){z[i]=0}}
z
for (i in z){if (i<0){i=0}}
z
rm z
delete z
rm(z)
z = x-x
z = test * x
z
cube <- function(x){}
cube <- function(x){
return(x^3)
}
cube(5)
fact <- function(x){
if (x=1){return(1)}
}
fact <- function(x){
if (x<1){return(-1)}
if (x=1){return(1)}
return(x*fact(x-1))
}
fact <- function(x){
if (x<1){return(-1)}
if (x==1){return(1)}
return(x*fact(x-1))
}
fact <- function(x){
if (x<1){return(-1)}
if (x==1){return(1)}
return(x*fact(x-1))
}
fact(5)
fact(3.4)
fact(111)
fact(2000)
fact <- function(x){
answer=1
while(x>0){
answer = answer*x
x=x-1
}
}
fact(2000)
fact(5)
fact <- function(x){
answer=1
while(x>0){
answer = answer*x
x=x-1
}
return(answer)
}
fact(2000)
fact(1000)
fact(800)
fact(500)
fact(5)
fact(200)
fact(150)
fact(160)
fact(170)
fact(180)
fact(175)
fact(173)
fact(172)
fact(171)
fact(170)
f <- function(x,y){return(cube(x)-fact(y))}
f(2,2)
f(4,4)
g<-function(x){return(f(x,x))}
g(6)
g(5)
g(170)
g(171)
plot(x)
plot(z)
plot(x,z)
plot(cube(x),fact(z))
cube(x)
plot(cube(x))
plot(cube(x),z)
plot(z,cube(x))
x=rnorm(100)
y=rnorm(100)
plot(x,y)
plot(x,y, type="b")
x=cumsum(x)
x
y=(1:100)
y
plot(y,x)
plot(y,x,type="l")
x=rnorm(100)
plot(y,x,type="l")
x=cumsum(x)
plot(y,x,type="l")
x=rnorm(100)
x=cumsum(x)
plot(y,x,type="l")
x=rnorm(100)
x=cumsum(x)
plot(y,x,type="l")
x=rnorm(100)
x=cumsum(x)
plot(y,x,type="l")
x=rnorm(100)
x=cumsum(x)
plot(y,x,type="l")
x=rnorm(100)
hist(x)
x=rnorm(100)
x=rnorm(100)
hist(x)
x=rnorm(100)
hist(x)
x=rnorm(100)
hist(x)
x=rnorm(100)
hist(x)
x=rnorm(100)
y=rnorm(100)
xsign = x/abs(x)
xsign
ysign = y/abs(y)
colour = ifelse(x>0, "red", "green"")
colour = ifelse(x>0, "red", "green")
colour
colour = ifelse(x>0, "red", ifelse(y>0, "blue","green"))
colour
colour = ifelse(x>0, ifelse(y>0,"red","purple"), ifelse(y>0, "blue","green"))
plot(x,y,col=colour)
x=rnorm(100)
y=rnorm(100)
colour = ifelse(x>0, ifelse(y>0,"red","purple"), ifelse(y>0, "blue","green"))
plot(x,y,col=colour)
x=rnorm(100)
y=rnorm(100)
colour = ifelse(x>0, ifelse(y>0,"red","purple"), ifelse(y>0, "blue","green"))
plot(x,y,col=colour)
x=rnorm(100)
y=rnorm(100)
colour = ifelse(x>0, ifelse(y>0,"red","purple"), ifelse(y>0, "blue","green"))
plot(x,y,col=colour)
x=rnorm(100)
y=rnorm(100)
colour = ifelse(x>0, ifelse(y>0,"red","purple"), ifelse(y>0, "blue","green"))
plot(x,y,col=colour)
x = rnorm(100)
x=cumsum(x)
plot(x,type='l')
(6000-160)/3
5*1947+80
3*1947+160
9815/6001
6001/9815
?package
??package
package(swirl)
library(swirl)
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
c(0.5, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect<1
tf
num_vect >=6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse=" ")
c(my_char, "Leo") -> my_name
my_name
paste(my_name, collapse=" ")
paste("Hello", "world!", sep=" ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS, 1:4, sep= "-")
x<-c(44,NA,5,NA)
3*x
y <- rnorm(1000)
z<-rep(NA, 1000)
my_data <- sample(c(y,z),100)
my_na = is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 3, norf = NA)
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect[2]
vect["bar"]
vect[c("foo","bar")]
my_vector = 1:20
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim_my_v
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_vector -> my_matrix
?matrix
matrix(1:20, nrow=4, ncol=5) -> my_matrix2
identical(my_matrix, my_matrix2)
patients <- c("Bill", "gina", "Kelly", "Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
cnames -> colnames(my_data)
my_data
clr()
clear()
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
help(<<-)
help("<<-")
setwd("~/GitHub/ProgrammingAssignment2")
ls()
dir()
source("cachematrix.R")
M = c(c(1,2,3),c(4,5,6),c(6,7,8))
?dim
dim(M) <- c(3,3)
M
special <- makeCacheMatrix(M)
special
?cacheSolve
??cacheSolve
cacheSolve(special)
M[3,3]-<16
M[3,3]<-16
special$set(M)
special$get()
cacheSolve(special)
special
special$get()
special$getinv()
M[1,1]<-3
special$set(M)
special$get()
special$getinv()
cacheSolve(special)
source("cachematrix.R")
M<-1:25
dim(M)<-c(5,5)
M
special = makeCacheMatrix(M)
special$get()
cacheSolve(special)
M[1,1]<-0
special$set(M)
special$get()
cacheSolve(special)
M <-randn(25)
??normal
??random
??random
?nrand
??nrand
M<-rnorm(25)
dim(M)<-c(5,5)
M
special$set(M)
special$get()
cacheSolve(special)
special$get()
cacheSolve(special)
q=cacheSolve(special)
p=special$get()
p*g
p*q
dot(p,q)
p%*%q
det(p)
det(q)
det(p)*det(q)
